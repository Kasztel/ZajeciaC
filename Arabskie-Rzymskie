#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

//do tego programu podszedłem inaczej niż do innych, argumenty funkcji main podaje się przy wywoływaniu
//programu tj. np. "./arabskie 15" -> program wyrzuca nam wtedy XV 
// oraz w drugą stronę "./arabskie XV" -> wyrzuca nam 15
//wszystko działa dobrze oczywiście jeśli zachowamy odopowiednią gramatyke przy wpisywaniu
//wyrażenia w postaci liczby rzymskiej (XMI wyrzuci nam błędny wynik)

struct RZYM {
    int arab;
    char *rzym;
} rz[] = {{1,"I"},{4,"IV"},{5,"V"},{9,"IX"},{10,"X"},{40,"XL"},{50,"L"},{90,"XC"},{100,"C"},{400,"CD"},{500,"D"},{900,"CM"},{1000,"M"}};

int main(int narg, char *args[]) {
    if (narg < 2) return -1;

    int i_a = sizeof(rz)/sizeof(rz[0]) - 1; 
    int i_r = 0;

    if (isdigit(*args[1])) { //arabskie na rzymskie
        int a = atoi(args[1]);
        char r[50];
        int powt;
        for (i_r = sizeof(rz)/sizeof(rz[0]) - 1; i_r >= 0; i_r--) {
            powt = (int)(a / rz[i_r].arab);
            for (i_a = 0; i_a < powt; i_a++) strcat(r, rz[i_r].rzym);
            a -= powt * rz[i_r].arab;
        }
        printf("%s = %s \n", args[1], r);
    }

    else if (isalpha(*args[1])) { //rzymskie na arabskie
        char *r = args[1];
        int a = 0;
        while (i_a >= 0) {
            if (strlen(rz[i_a].rzym) == 1) {
                if (rz[i_a].rzym[0] == r[i_r]) {
                    a += rz[i_a].arab;
                    i_r++;
                }
                else i_a--;
            }
            else {
                if (rz[i_a].rzym[0] == r[i_r] && rz[i_a].rzym[1] == r[i_r + 1]) {
                    a += rz[i_a].arab;
                    i_r += 2;
                }
                else i_a--;
            }
        }
        printf("%s = %d \n", r, a);
    }
    return 0;
}
